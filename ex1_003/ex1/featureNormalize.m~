function [X_norm, mu, sigma] = featureNormalize(X)
%FEATURENORMALIZE Normalizes the features in X 
%   FEATURENORMALIZE(X) returns a normalized version of X where
%   the mean value of each feature is 0 and the standard deviation
%   is 1. This is often a good preprocessing step to do when
%   working with learning algorithms.

% You need to set these values correctly
X_norm = X;
%mu = zeros(1, size(X, 2));
%sigma = zeros(1, size(X, 2));

% ====================== YOUR CODE HERE ======================
% Instructions: First, for each feature dimension, compute the mean
%               of the feature and subtract it from the dataset,
%               storing the mean value in mu. Next, compute the 
%               standard deviation of each feature and divide
%               each feature by it's standard deviation, storing
%               the standard deviation in sigma. 
%
%               Note that X is a matrix where each column is a 
%               feature and each row is an example. You need 
%               to perform the normalization separately for 
%               each feature. 
%
% Hint: You might find the 'mean' and 'std' functions useful.
%       

stdFlag = 1;  % to calculate STD according to being devided by n rather than n-1
STDSize = std(X(:, 1), stdFlag);
STDBedrooms = std(X(:, 2), stdFlag);
sigma = [STDSize, STDBedrooms];

muSize = mean(X(:,1));
muBedrooms = mean(X(:, 2));
mu = [muSize ,muBedrooms  ];


for k=1:length(X_norm)
    X_norm(k,1) = (X_norm(k,1) - muSize) / STDSize;
    X_norm(k,2) = (X_norm(k,2) - muBedrooms) / STDBedrooms;
end

mean(X_norm)
std(X_norm, 1)




% ============================================================

end
